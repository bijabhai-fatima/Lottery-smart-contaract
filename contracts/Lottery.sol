// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol";
import "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol";
import "@chainlink/contracts/src/v0.8/AutomationCompatible.sol";

error Lottery__NotEnoughEthSent();
error Lottrey__transactionFailed();
error Lottery__NotOPEN();
error Lottery_UpKeepNotNeeded(uint256 currentBalance, uint256 players, uint256 lotteryState);
  
contract lottery is VRFConsumerBaseV2, AutomationCompatibleInterface{
    // ================ Type declaration ===============
    enum LottreyState {
        OPEN, 
        CALCULATING
    }

    // ============= State Variable===========
    uint256 private immutable i_entranceFee;
    address payable[] private s_players;
    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;
    bytes32 private immutable i_gasLane;
    uint64 private immutable i_subscriptionId;
    uint16 private immutable REQUEST_CONFIRMATON = 3;
    uint32 private immutable i_callbackGasLimit;
    uint16 private immutable NUM_WORDS = 1;

    // =============== Lottrey Variables ============
    address private s_recentWinner;
    LottreyState private s_lottreyState;
    uint256 private s_LastTimeStamp;
    uint256 private immutable i_interval;

    // ============= Events ================
    event lotteryEnter(address indexed player); 
    event RequestedLotteryWinner(uint256 indexed requestId);
    event WinnerPicked(address indexed winner);

    /**
     * HARDCODED FOR GOERLI
     * COORDINATOR: 0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D
     * COORDIMATOR is the address of contract which does random number varification
     */
    constructor(address _VRFCoordimatorV2,
              uint256 _entranceFee,
              bytes32 _gasLane,
              uint64 _subscriptionId,
              uint32 _callbackGasLimit,
              uint256 _interval) VRFConsumerBaseV2(_VRFCoordimatorV2){

        i_entranceFee = _entranceFee;
        i_vrfCoordinator = VRFCoordinatorV2Interface(_VRFCoordimatorV2);
        i_gasLane = _gasLane;
        i_subscriptionId = _subscriptionId;
        i_callbackGasLimit = _callbackGasLimit;
        s_lottreyState = LottreyState.OPEN;
        s_LastTimeStamp = block.timestamp;
        i_interval = _interval;
    }

    function enterLottery() public payable {
        // require(msg.value >= i_entranceFee,"Not enough ethers sent")

        //but to save gas 
        if(msg.value < i_entranceFee){ revert Lottery__NotEnoughEthSent();}
        if(s_lottreyState != LottreyState.OPEN){ revert Lottery__NotOPEN();}

        s_players.push(payable(msg.sender));

        //we are updating array
        //emit event 
        emit lotteryEnter(msg.sender);
    }

    // following should be true in roder to return true
    // 1. time interver should have past
    // 2. lootery must have minimum one player and some ethers
    // 3. must be in open State
    // 4. subscription must have funded with LINK
    function checkUpkeep(
        bytes memory /* checkData */
    )
        public
        view
        override
        returns (bool upkeepNeeded, bytes memory /* performData */)
    {
        bool isOpen = (s_lottreyState == LottreyState.OPEN);
        bool timePassed = (block.timestamp - s_LastTimeStamp > i_interval);
        bool hasPlayers = (s_players.length > 0);
        bool hasBalance = (address(this).balance > 0);
        bool upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);
        return (upkeepNeeded, "");

        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    }

     function performUpkeep(bytes calldata /* performData */) external override {
         (bool upkeepNeeded, ) = checkUpkeep("");
         if(!upkeepNeeded) { revert Lottery_UpKeepNotNeeded(
            address(this).balance,
            s_players.length, 
            uint256(s_lottreyState));
            }

         // Will revert if subscription is not set and funded.
        s_lottreyState = LottreyState.CALCULATING;
        uint256 requestId = i_vrfCoordinator.requestRandomWords(
            i_gasLane,
            i_subscriptionId,
            REQUEST_CONFIRMATON,
            i_callbackGasLimit,
            NUM_WORDS
        );
        emit RequestedLotteryWinner(requestId);
        // We don't use the performData in this example. The performData is generated by the Automation Node's call to your checkUpkeep function
    }
    
    // function requestRandomWinner() external{
    //     // Will revert if subscription is not set and funded.
    //     s_lottreyState = LottreyState.CALCULATING;
    //     uint256 requestId = i_vrfCoordinator.requestRandomWords(
    //         i_gasLane,
    //         i_subscriptionId,
    //         REQUEST_CONFIRMATON,
    //         i_callbackGasLimit,
    //         NUM_WORDS
    //     );
    //     emit RequestedLotteryWinner(requestId);
    // }
    // =================================  get the random word =======================
    function fulfillRandomWords(
        uint256 /* _requestId */, 
        uint256[] memory _randomWords
    ) internal override {

        uint256 indexOfWinner = _randomWords[0] % s_players.length;
        address recentWinner = s_players[indexOfWinner];

        s_recentWinner = recentWinner;

        s_lottreyState = LottreyState.OPEN;

        s_players = new address payable[](0);

        s_LastTimeStamp = block.timestamp;

        (bool success,) = recentWinner.call{value: address(this).balance}("");
        if(!success){ revert Lottrey__transactionFailed();}
        emit WinnerPicked(recentWinner);
    }

    

    // ===========================================view/ pure fuctions========================================================
    function getEntrenceFee() public view returns(uint256){
        return i_entranceFee;
    }

    function getPlayer(uint256 index) public view returns(address){
        return s_players[index];
    }

    function getRecentWinner() public view returns(address){
        return s_recentWinner;
    }

    function getLotteryState() public view returns(LottreyState){
        return s_lottreyState;
    }

    function getNumWords() public pure returns(uint16){
        return NUM_WORDS;
    }

    function getNumberOfPlayers() public view returns(uint256){
        return s_players.length;
    }

    function getRequestConfirmations() public pure returns(uint16){
        return REQUEST_CONFIRMATON;
    }

    function getLatestTimeStamps() public view returns(uint256){
        return s_LastTimeStamp;
    }
}